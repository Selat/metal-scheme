(define~symbol *tests-run*~symbol 0~int)
(define~symbol *tests-passed*~symbol 0~int)
(define-syntax~symbol test~symbol (syntax-rules~symbol ()~nil ((test~symbol name~symbol expect~symbol expr~symbol) (test~symbol expect~symbol expr~symbol)) ((test~symbol expect~symbol expr~symbol) (begin~symbol (set!~symbol *tests-run*~symbol (+~symbol *tests-run*~symbol 1~int)) (let~symbol ((str~symbol (call-with-output-string~symbol (lambda~symbol (out~symbol) (write~symbol *tests-run*~symbol) (display~symbol ". "~string) (display~symbol 'expr~symbol out~symbol)))) (res~symbol expr~symbol)) (display~symbol str~symbol) (write-char~symbol #\space~char) (display~symbol (make-string~symbol (max~symbol 0~int (-~symbol 72~int (string-length~symbol str~symbol))) #\.~char)) (flush-output~symbol) (cond~symbol ((equal?~symbol res~symbol expect~symbol) (set!~symbol *tests-passed*~symbol (+~symbol *tests-passed*~symbol 1~int)) (display~symbol " [PASS]\n"~string)) (else~symbol (display~symbol " [FAIL]\n"~string) (display~symbol "    expected "~string) (write~symbol expect~symbol) (display~symbol " but got "~string) (write~symbol res~symbol) (newline~symbol))))))))
(define-syntax~symbol test-assert~symbol (syntax-rules~symbol ()~nil ((test-assert~symbol expr~symbol) (test~symbol #t~bool expr~symbol))))
(define~symbol (test-begin~symbol . name~symbol) #f~bool)
(define~symbol (test-end~symbol) (write~symbol *tests-passed*~symbol) (display~symbol " out of "~string) (write~symbol *tests-run*~symbol) (display~symbol " passed ("~string) (write~symbol (*~symbol (/~symbol *tests-passed*~symbol *tests-run*~symbol) 100~int)) (display~symbol "%)"~string) (newline~symbol))
(test-begin~symbol "r5rs"~string)
(test~symbol 8~int ((lambda~symbol (x~symbol) (+~symbol x~symbol x~symbol)) 4~int))
(test~symbol '(3~int 4~int 5~int 6~int) ((lambda~symbol x~symbol x~symbol) 3~int 4~int 5~int 6~int))
(test~symbol '(5~int 6~int) ((lambda~symbol (x~symbol y~symbol . z~symbol) z~symbol) 3~int 4~int 5~int 6~int))
(test~symbol 'yes~symbol (if~symbol (>~symbol 3~int 2~int) 'yes~symbol 'no~symbol))
(test~symbol 'no~symbol (if~symbol (>~symbol 2~int 3~int) 'yes~symbol 'no~symbol))
(test~symbol 1~int (if~symbol (>~symbol 3~int 2~int) (-~symbol 3~int 2~int) (+~symbol 3~int 2~int)))
(test~symbol 'greater~symbol (cond~symbol ((>~symbol 3~int 2~int) 'greater~symbol) ((<~symbol 3~int 2~int) 'less~symbol)))
(test~symbol 'equal~symbol (cond~symbol ((>~symbol 3~int 3~int) 'greater~symbol) ((<~symbol 3~int 3~int) 'less~symbol) (else~symbol 'equal~symbol)))
(test~symbol 'composite~symbol (case~symbol (*~symbol 2~int 3~int) ((2~int 3~int 5~int 7~int) 'prime~symbol) ((1~int 4~int 6~int 8~int 9~int) 'composite~symbol)))
(test~symbol 'consonant~symbol (case~symbol (car~symbol '(c~symbol d~symbol)) ((a~symbol e~symbol i~symbol o~symbol u~symbol) 'vowel~symbol) ((w~symbol y~symbol) 'semivowel~symbol) (else~symbol 'consonant~symbol)))
(test~symbol #t~bool (and~symbol (=~symbol 2~int 2~int) (>~symbol 2~int 1~int)))
(test~symbol #f~bool (and~symbol (=~symbol 2~int 2~int) (<~symbol 2~int 1~int)))
(test~symbol '(f~symbol g~symbol) (and~symbol 1~int 2~int 'c~symbol '(f~symbol g~symbol)))
(test~symbol #t~bool (and~symbol))
(test~symbol #t~bool (or~symbol (=~symbol 2~int 2~int) (>~symbol 2~int 1~int)))
(test~symbol #t~bool (or~symbol (=~symbol 2~int 2~int) (<~symbol 2~int 1~int)))
(test~symbol '(b~symbol c~symbol) (or~symbol (memq~symbol 'b~symbol '(a~symbol b~symbol c~symbol)) (/~symbol 3~int 0~int)))
(test~symbol 6~int (let~symbol ((x~symbol 2~int) (y~symbol 3~int)) (*~symbol x~symbol y~symbol)))
(test~symbol 35~int (let~symbol ((x~symbol 2~int) (y~symbol 3~int)) (let~symbol ((x~symbol 7~int) (z~symbol (+~symbol x~symbol y~symbol))) (*~symbol z~symbol x~symbol))))
(test~symbol 70~int (let~symbol ((x~symbol 2~int) (y~symbol 3~int)) (let*~symbol ((x~symbol 7~int) (z~symbol (+~symbol x~symbol y~symbol))) (*~symbol z~symbol x~symbol))))
(test~symbol -2~int (let~symbol ()~nil (define~symbol x~symbol 2~int) (define~symbol f~symbol (lambda~symbol ()~nil (-~symbol x~symbol))) (f~symbol)))
(define~symbol let*-def~symbol 1~int)
(let*~symbol ()~nil (define~symbol let*-def~symbol 2~int) #f~bool)
(test~symbol 1~int let*-def~symbol)
(test~symbol '#(0~int 1~int 2~int 3~int 4~int) (do~symbol ((vec~symbol (make-vector~symbol 5~int)) (i~symbol 0~int (+~symbol i~symbol 1~int))) ((=~symbol i~symbol 5~int) vec~symbol) (vector-set!~symbol vec~symbol i~symbol i~symbol)))
(test~symbol 25~int (let~symbol ((x~symbol '(1~int 3~int 5~int 7~int 9~int))) (do~symbol ((x~symbol x~symbol (cdr~symbol x~symbol)) (sum~symbol 0~int (+~symbol sum~symbol (car~symbol x~symbol)))) ((null?~symbol x~symbol) sum~symbol))))
(test~symbol '((6~int 1~int 3~int) (-5~int -2~int)) (let~symbol loop~symbol ((numbers~symbol '(3~int -2~int 1~int 6~int -5~int)) (nonneg~symbol '()~nil) (neg~symbol '()~nil)) (cond~symbol ((null?~symbol numbers~symbol) (list~symbol nonneg~symbol neg~symbol)) ((>=~symbol (car~symbol numbers~symbol) 0~int) (loop~symbol (cdr~symbol numbers~symbol) (cons~symbol (car~symbol numbers~symbol) nonneg~symbol) neg~symbol)) ((<~symbol (car~symbol numbers~symbol) 0~int) (loop~symbol (cdr~symbol numbers~symbol) nonneg~symbol (cons~symbol (car~symbol numbers~symbol) neg~symbol))))))
(test~symbol '(list~symbol 3~int 4~int) `(list~symbol ,(+~symbol 1~int 2~int) 4~int))
(test~symbol '(list~symbol a~symbol 'a~symbol) (let~symbol ((name~symbol 'a~symbol)) `(list~symbol ,name~symbol ',name~symbol)))
(test~symbol '(a~symbol 3~int 4~int 5~int 6~int b~symbol) `(a~symbol ,(+~symbol 1~int 2~int) ,@(map~symbol abs~symbol '(4~int -5~int 6~int)) b~symbol))
(test~symbol '(10~int 5~int 4~int 16~int 9~int 8~int) `(10~int 5~int ,(expt~symbol 2~int 2~int) ,@(map~symbol (lambda~symbol (n~symbol) (expt~symbol n~symbol 2~int)) '(4~int 3~int)) 8~int))
(test~symbol '(a~symbol `(b~symbol ,(+~symbol 1~int 2~int) ,(foo~symbol 4~int d~symbol) e~symbol) f~symbol) `(a~symbol `(b~symbol ,(+~symbol 1~int 2~int) ,(foo~symbol ,(+~symbol 1~int 3~int) d~symbol) e~symbol) f~symbol))
(test~symbol '(a~symbol `(b~symbol ,x~symbol ,'y~symbol d~symbol) e~symbol) (let~symbol ((name1~symbol 'x~symbol) (name2~symbol 'y~symbol)) `(a~symbol `(b~symbol ,,name1~symbol ,',name2~symbol d~symbol) e~symbol)))
(test~symbol '(list~symbol 3~int 4~int) `(list~symbol ,(+~symbol 1~int 2~int) 4~int))
(test~symbol #t~bool (eqv?~symbol 'a~symbol 'a~symbol))
(test~symbol #f~bool (eqv?~symbol 'a~symbol 'b~symbol))
(test~symbol #t~bool (eqv?~symbol '()~nil '()~nil))
(test~symbol #f~bool (eqv?~symbol (cons~symbol 1~int 2~int) (cons~symbol 1~int 2~int)))
(test~symbol #f~bool (eqv?~symbol (lambda~symbol ()~nil 1~int) (lambda~symbol ()~nil 2~int)))
(test~symbol #t~bool (let~symbol ((p~symbol (lambda~symbol (x~symbol) x~symbol))) (eqv?~symbol p~symbol p~symbol)))
(test~symbol #t~bool (eq?~symbol 'a~symbol 'a~symbol))
(test~symbol #f~bool (eq?~symbol (list~symbol 'a~symbol) (list~symbol 'a~symbol)))
(test~symbol #t~bool (eq?~symbol '()~nil '()~nil))
(test~symbol #t~bool (eq?~symbol car~symbol car~symbol))
(test~symbol #t~bool (let~symbol ((x~symbol '(a~symbol))) (eq?~symbol x~symbol x~symbol)))
(test~symbol #t~bool (let~symbol ((p~symbol (lambda~symbol (x~symbol) x~symbol))) (eq?~symbol p~symbol p~symbol)))
(test~symbol #t~bool (equal?~symbol 'a~symbol 'a~symbol))
(test~symbol #t~bool (equal?~symbol '(a~symbol) '(a~symbol)))
(test~symbol #t~bool (equal?~symbol '(a~symbol (b~symbol) c~symbol) '(a~symbol (b~symbol) c~symbol)))
(test~symbol #t~bool (equal?~symbol "abc"~string "abc"~string))
(test~symbol #f~bool (equal?~symbol "abc"~string "abcd"~string))
(test~symbol #f~bool (equal?~symbol "a"~string "b"~string))
(test~symbol #t~bool (equal?~symbol 2~int 2~int))
(test~symbol #t~bool (equal?~symbol (make-vector~symbol 5~int 'a~symbol) (make-vector~symbol 5~int 'a~symbol)))
(test~symbol 4~int (max~symbol 3~int 4~int))
(test~symbol 7~int (+~symbol 3~int 4~int))
(test~symbol 3~int (+~symbol 3~int))
(test~symbol 0~int (+~symbol))
(test~symbol 4~int (*~symbol 4~int))
(test~symbol 1~int (*~symbol))
(test~symbol -1~int (-~symbol 3~int 4~int))
(test~symbol -6~int (-~symbol 3~int 4~int 5~int))
(test~symbol -3~int (-~symbol 3~int))
(test~symbol -1.0~float (-~symbol 3.0~float 4~int))
(test~symbol 7~int (abs~symbol -7~int))
(test~symbol 1~int (modulo~symbol 13~int 4~int))
(test~symbol 1~int (remainder~symbol 13~int 4~int))
(test~symbol 3~int (modulo~symbol -13~int 4~int))
(test~symbol -1~int (remainder~symbol -13~int 4~int))
(test~symbol -3~int (modulo~symbol 13~int -4~int))
(test~symbol 1~int (remainder~symbol 13~int -4~int))
(test~symbol -1~int (modulo~symbol -13~int -4~int))
(test~symbol -1~int (remainder~symbol -13~int -4~int))
(test~symbol 4~int (gcd~symbol 32~int -36~int))
(test~symbol 288~int (lcm~symbol 32~int -36~int))
(test~symbol 100~int (string->number~symbol "100"~string))
(test~symbol 256~int (string->number~symbol "100"~string 16~int))
(test~symbol 127~int (string->number~symbol "177"~string 8~int))
(test~symbol 5~int (string->number~symbol "101"~string 2~int))
(test~symbol 100.0~float (string->number~symbol "1e2"~string))
(test~symbol "100"~string (number->string~symbol 100~int))
(test~symbol "100"~string (number->string~symbol 256~int 16~int))
(test~symbol "ff"~string (number->string~symbol 255~int 16~int))
(test~symbol "177"~string (number->string~symbol 127~int 8~int))
(test~symbol "101"~string (number->string~symbol 5~int 2~int))
(test~symbol #f~bool (not~symbol 3~int))
(test~symbol #f~bool (not~symbol (list~symbol 3~int)))
(test~symbol #f~bool (not~symbol '()~nil))
(test~symbol #f~bool (not~symbol (list~symbol)))
(test~symbol #f~bool (not~symbol '()~nil))
(test~symbol #f~bool (boolean?~symbol 0~int))
(test~symbol #f~bool (boolean?~symbol '()~nil))
(test~symbol #t~bool (pair?~symbol '(a~symbol . b~symbol)))
(test~symbol #t~bool (pair?~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol '(a~symbol) (cons~symbol 'a~symbol '()~nil))
(test~symbol '((a~symbol) b~symbol c~symbol d~symbol) (cons~symbol '(a~symbol) '(b~symbol c~symbol d~symbol)))
(test~symbol '("a"~string b~symbol c~symbol) (cons~symbol "a"~string '(b~symbol c~symbol)))
(test~symbol '(a~symbol . 3~int) (cons~symbol 'a~symbol 3~int))
(test~symbol '((a~symbol b~symbol) . c~symbol) (cons~symbol '(a~symbol b~symbol) 'c~symbol))
(test~symbol 'a~symbol (car~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol '(a~symbol) (car~symbol '((a~symbol) b~symbol c~symbol d~symbol)))
(test~symbol 1~int (car~symbol '(1~int . 2~int)))
(test~symbol '(b~symbol c~symbol d~symbol) (cdr~symbol '((a~symbol) b~symbol c~symbol d~symbol)))
(test~symbol 2~int (cdr~symbol '(1~int . 2~int)))
(test~symbol #t~bool (list?~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol #t~bool (list?~symbol '()~nil))
(test~symbol #f~bool (list?~symbol '(a~symbol . b~symbol)))
(test~symbol #f~bool (let~symbol ((x~symbol (list~symbol 'a~symbol))) (set-cdr!~symbol x~symbol x~symbol) (list?~symbol x~symbol)))
(test~symbol '(a~symbol 7~int c~symbol) (list~symbol 'a~symbol (+~symbol 3~int 4~int) 'c~symbol))
(test~symbol '()~nil (list~symbol))
(test~symbol 3~int (length~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol 3~int (length~symbol '(a~symbol (b~symbol) (c~symbol d~symbol e~symbol))))
(test~symbol 0~int (length~symbol '()~nil))
(test~symbol '(x~symbol y~symbol) (append~symbol '(x~symbol) '(y~symbol)))
(test~symbol '(a~symbol b~symbol c~symbol d~symbol) (append~symbol '(a~symbol) '(b~symbol c~symbol d~symbol)))
(test~symbol '(a~symbol (b~symbol) (c~symbol)) (append~symbol '(a~symbol (b~symbol)) '((c~symbol))))
(test~symbol '(a~symbol b~symbol c~symbol . d~symbol) (append~symbol '(a~symbol b~symbol) '(c~symbol . d~symbol)))
(test~symbol 'a~symbol (append~symbol '()~nil 'a~symbol))
(test~symbol '(c~symbol b~symbol a~symbol) (reverse~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol '((e~symbol (f~symbol)) d~symbol (b~symbol c~symbol) a~symbol) (reverse~symbol '(a~symbol (b~symbol c~symbol) d~symbol (e~symbol (f~symbol)))))
(test~symbol 'c~symbol (list-ref~symbol '(a~symbol b~symbol c~symbol d~symbol) 2~int))
(test~symbol '(a~symbol b~symbol c~symbol) (memq~symbol 'a~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol '(b~symbol c~symbol) (memq~symbol 'b~symbol '(a~symbol b~symbol c~symbol)))
(test~symbol #f~bool (memq~symbol 'a~symbol '(b~symbol c~symbol d~symbol)))
(test~symbol #f~bool (memq~symbol (list~symbol 'a~symbol) '(b~symbol (a~symbol) c~symbol)))
(test~symbol '((a~symbol) c~symbol) (member~symbol (list~symbol 'a~symbol) '(b~symbol (a~symbol) c~symbol)))
(test~symbol '(101~int 102~int) (memv~symbol 101~int '(100~int 101~int 102~int)))
(test~symbol #f~bool (assq~symbol (list~symbol 'a~symbol) '(((a~symbol)) ((b~symbol)) ((c~symbol)))))
(test~symbol '((a~symbol)) (assoc~symbol (list~symbol 'a~symbol) '(((a~symbol)) ((b~symbol)) ((c~symbol)))))
(test~symbol '(5~int 7~int) (assv~symbol 5~int '((2~int 3~int) (5~int 7~int) (11~int 13~int))))
(test~symbol #t~bool (symbol?~symbol 'foo~symbol))
(test~symbol #t~bool (symbol?~symbol (car~symbol '(a~symbol b~symbol))))
(test~symbol #f~bool (symbol?~symbol "bar"~string))
(test~symbol #t~bool (symbol?~symbol 'nil~symbol))
(test~symbol #f~bool (symbol?~symbol '()~nil))
(test~symbol "flying-fish"~string (symbol->string~symbol 'flying-fish~symbol))
(test~symbol "Martin"~string (symbol->string~symbol 'martin~symbol))
(test~symbol "Malvina"~string (symbol->string~symbol (string->symbol~symbol "Malvina"~string)))
(test~symbol #t~bool (string?~symbol "a"~string))
(test~symbol #f~bool (string?~symbol 'a~symbol))
(test~symbol 0~int (string-length~symbol ""~string))
(test~symbol 3~int (string-length~symbol "abc"~string))
(test~symbol #\a~char (string-ref~symbol "abc"~string 0~int))
(test~symbol #\c~char (string-ref~symbol "abc"~string 2~int))
(test~symbol #t~bool (string=?~symbol "a"~string (string~symbol #\a~char)))
(test~symbol #f~bool (string=?~symbol "a"~string (string~symbol #\b~char)))
(test~symbol #t~bool (string<?~symbol "a"~string "aa"~string))
(test~symbol #f~bool (string<?~symbol "aa"~string "a"~string))
(test~symbol #f~bool (string<?~symbol "a"~string "a"~string))
(test~symbol #t~bool (string<=?~symbol "a"~string "aa"~string))
(test~symbol #t~bool (string<=?~symbol "a"~string "a"~string))
(test~symbol #t~bool (string=?~symbol "a"~string (make-string~symbol 1~int #\a~char)))
(test~symbol #f~bool (string=?~symbol "a"~string (make-string~symbol 1~int #\b~char)))
(test~symbol ""~string (substring~symbol "abc"~string 0~int 0~int))
(test~symbol "a"~string (substring~symbol "abc"~string 0~int 1~int))
(test~symbol "bc"~string (substring~symbol "abc"~string 1~int 3~int))
(test~symbol "abc"~string (string-append~symbol "abc"~string ""~string))
(test~symbol "abc"~string (string-append~symbol ""~string "abc"~string))
(test~symbol "abc"~string (string-append~symbol "a"~string "bc"~string))
(test~symbol '#(0~int ("Sue"~string "Sue"~string) "Anna"~string) (let~symbol ((vec~symbol (vector~symbol 0~int '(2~int 2~int 2~int 2~int) "Anna"~string))) (vector-set!~symbol vec~symbol 1~int '("Sue"~string "Sue"~string)) vec~symbol))
(test~symbol '(dah~symbol dah~symbol didah~symbol) (vector->list~symbol '#(dah~symbol dah~symbol didah~symbol)))
(test~symbol '#(dididit~symbol dah~symbol) (list->vector~symbol '(dididit~symbol dah~symbol)))
(test~symbol #t~bool (procedure?~symbol car~symbol))
(test~symbol #f~bool (procedure?~symbol 'car~symbol))
(test~symbol #t~bool (procedure?~symbol (lambda~symbol (x~symbol) (*~symbol x~symbol x~symbol))))
(test~symbol #f~bool (procedure?~symbol '(lambda~symbol (x~symbol) (*~symbol x~symbol x~symbol))))
(test~symbol #t~bool (call-with-current-continuation~symbol procedure?~symbol))
(test~symbol 7~int (call-with-current-continuation~symbol (lambda~symbol (k~symbol) (+~symbol 2~int 5~int))))
(test~symbol 3~int (call-with-current-continuation~symbol (lambda~symbol (k~symbol) (+~symbol 2~int 5~int (k~symbol 3~int)))))
(test~symbol 7~int (apply~symbol +~symbol (list~symbol 3~int 4~int)))
(test~symbol '(b~symbol e~symbol h~symbol) (map~symbol cadr~symbol '((a~symbol b~symbol) (d~symbol e~symbol) (g~symbol h~symbol))))
(test~symbol '(1~int 4~int 27~int 256~int 3125~int) (map~symbol (lambda~symbol (n~symbol) (expt~symbol n~symbol n~symbol)) '(1~int 2~int 3~int 4~int 5~int)))
(test~symbol '(5~int 7~int 9~int) (map~symbol +~symbol '(1~int 2~int 3~int) '(4~int 5~int 6~int)))
(test~symbol '#(0~int 1~int 4~int 9~int 16~int) (let~symbol ((v~symbol (make-vector~symbol 5~int))) (for-each~symbol (lambda~symbol (i~symbol) (vector-set!~symbol v~symbol i~symbol (*~symbol i~symbol i~symbol))) '(0~int 1~int 2~int 3~int 4~int)) v~symbol))
(test~symbol 3~int (force~symbol (delay~symbol (+~symbol 1~int 2~int))))
(test~symbol '(3~int 3~int) (let~symbol ((p~symbol (delay~symbol (+~symbol 1~int 2~int)))) (list~symbol (force~symbol p~symbol) (force~symbol p~symbol))))
(test~symbol 'ok~symbol (let~symbol ((else~symbol 1~int)) (cond~symbol (else~symbol 'ok~symbol) (#t~bool 'bad~symbol))))
(test~symbol 'ok~symbol (let~symbol ((=>~symbol 1~int)) (cond~symbol (#t~bool =>~symbol 'ok~symbol))))
(test~symbol '(,foo~symbol) (let~symbol (,1~int) `(,foo~symbol)))
(test~symbol '(,@foo~symbol) (let~symbol (,@1~int) `(,@foo~symbol)))
(test~symbol 'ok~symbol (let~symbol ((...~symbol 2~int)) (let-syntax~symbol ((s~symbol (syntax-rules~symbol ()~nil ((_~symbol x~symbol ...~symbol) 'bad~symbol) ((_~symbol . r~symbol) 'ok~symbol)))) (s~symbol a~symbol b~symbol c~symbol))))
(test~symbol 'ok~symbol (let~symbol ()~nil (let-syntax~symbol ()~nil (define~symbol internal-def~symbol 'ok~symbol)) internal-def~symbol))
(test~symbol 'ok~symbol (let~symbol ()~nil (letrec-syntax~symbol ()~nil (define~symbol internal-def~symbol 'ok~symbol)) internal-def~symbol))
(test~symbol '(2~int 1~int) ((lambda~symbol ()~nil (let~symbol ((x~symbol 1~int)) (let~symbol ((y~symbol x~symbol)) (set!~symbol x~symbol 2~int) (list~symbol x~symbol y~symbol))))))
(test~symbol '(2~int 2~int) ((lambda~symbol ()~nil (let~symbol ((x~symbol 1~int)) (set!~symbol x~symbol 2~int) (let~symbol ((y~symbol x~symbol)) (list~symbol x~symbol y~symbol))))))
(test~symbol '(1~int 2~int) ((lambda~symbol ()~nil (let~symbol ((x~symbol 1~int)) (let~symbol ((y~symbol x~symbol)) (set!~symbol y~symbol 2~int) (list~symbol x~symbol y~symbol))))))
(test~symbol '(2~int 3~int) ((lambda~symbol ()~nil (let~symbol ((x~symbol 1~int)) (let~symbol ((y~symbol x~symbol)) (set!~symbol x~symbol 2~int) (set!~symbol y~symbol 3~int) (list~symbol x~symbol y~symbol))))))
(test~symbol '(a~symbol b~symbol c~symbol) (let*~symbol ((path~symbol '()~nil) (add~symbol (lambda~symbol (s~symbol) (set!~symbol path~symbol (cons~symbol s~symbol path~symbol))))) (dynamic-wind~symbol (lambda~symbol ()~nil (add~symbol 'a~symbol)) (lambda~symbol ()~nil (add~symbol 'b~symbol)) (lambda~symbol ()~nil (add~symbol 'c~symbol))) (reverse~symbol path~symbol)))
(test~symbol '(connect~symbol talk1~symbol disconnect~symbol connect~symbol talk2~symbol disconnect~symbol) (let~symbol ((path~symbol '()~nil) (c~symbol #f~bool)) (let~symbol ((add~symbol (lambda~symbol (s~symbol) (set!~symbol path~symbol (cons~symbol s~symbol path~symbol))))) (dynamic-wind~symbol (lambda~symbol ()~nil (add~symbol 'connect~symbol)) (lambda~symbol ()~nil (add~symbol (call-with-current-continuation~symbol (lambda~symbol (c0~symbol) (set!~symbol c~symbol c0~symbol) 'talk1~symbol)))) (lambda~symbol ()~nil (add~symbol 'disconnect~symbol))) (if~symbol (<~symbol (length~symbol path~symbol) 4~int) (c~symbol 'talk2~symbol) (reverse~symbol path~symbol)))))
(test~symbol 2~int (let-syntax~symbol ((foo~symbol (syntax-rules~symbol (*colon-hook*~symbol ':~symbol ~symbol) ()~nil ((foo~symbol ...~symbol args~symbol (*colon-hook*~symbol ':~symbol ~symbol)) (args~symbol (*colon-hook*~symbol ':~symbol ~symbol) ...~symbol))))) (foo~symbol 3~int -~symbol 5~int)))
(test~symbol '(5~int 4~int 1~int 2~int 3~int) (let-syntax~symbol ((foo~symbol (syntax-rules~symbol ()~nil ((foo~symbol args~symbol ...~symbol penultimate~symbol ultimate~symbol) (list~symbol ultimate~symbol penultimate~symbol args~symbol ...~symbol))))) (foo~symbol 1~int 2~int 3~int 4~int 5~int)))
(test-end~symbol)
